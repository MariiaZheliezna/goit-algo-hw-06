import networkx as nx
from collections import deque


def bfs_recursive(graph, queue, visited=None):
    # Перевіряємо, чи існує множина відвіданих вершин, якщо ні, то ініціалізуємо нову
    if visited is None:
        visited = set()
    # Якщо черга порожня, завершуємо рекурсію
    if not queue:
        return
    # Вилучаємо вершину з початку черги
    vertex = queue.popleft()
    # Перевіряємо, чи відвідували раніше дану вершину
    if vertex not in visited:
        # Якщо не відвідували, друкуємо вершину
        print(vertex, end=" ")
        # Додаємо вершину до множини відвіданих вершин.
        visited.add(vertex)
        # Додаємо невідвіданих сусідів даної вершини в кінець черги.
        queue.extend(set(graph[vertex]) - visited)
    # Рекурсивний виклик функції з тією ж чергою та множиною відвіданих вершин
    bfs_recursive(graph, queue, visited)

def dfs_recursive(graph, vertex, visited=None):
    if visited is None:
        visited = set()
    visited.add(vertex)
    print(vertex, end=' ')  # Відвідуємо вершину
    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs_recursive(graph, neighbor, visited)


# Граф деяких автошляхів Европи
G = nx.Graph()
G.add_nodes_from(['Київ', 'Варшава', 'Прага', 'Братислава', 'Відень', 
                  'Будапешт', 'Рим', 'Париж', 'Берлін', 'Лондон', 'Мадрид'])
G.add_edges_from([('Київ', 'Будапешт'), ('Київ', 'Братислава'), ('Київ', 'Прага'),
                  ('Київ', 'Варшава'), ('Прага', 'Відень'), ('Прага', 'Варшава'),
                  ('Прага', 'Рим'), ('Прага', 'Берлін'), ('Прага', 'Париж'),
                  ('Відень', 'Братислава'), ('Відень', 'Будапешт'), ('Відень', 'Рим'),
                  ('Будапешт', 'Братислава'), ('Будапешт', 'Рим'), ('Рим', 'Париж'),
                  ('Рим', 'Мадрид'), ('Варшава', 'Берлін'), ('Берлін', 'Париж'),
                  ('Берлін', 'Лондон'), ('Лондон', 'Париж'), ('Лондон', 'Мадрид'),
                  ('Мадрид', 'Париж')
                    ])
G['Київ']['Будапешт']['weight'] = 1117
G['Київ']['Братислава']['weight'] = 1330
G['Київ']['Прага']['weight'] = 1409
G['Київ']['Варшава']['weight'] = 794
G['Прага']['Відень']['weight'] = 340
G['Прага']['Варшава']['weight'] = 640
G['Прага']['Рим']['weight'] = 1300
G['Прага']['Берлін']['weight'] = 351
G['Прага']['Париж']['weight'] = 1031
G['Відень']['Братислава']['weight'] = 78
G['Відень']['Будапешт']['weight'] = 244
G['Відень']['Рим']['weight'] = 1134
G['Будапешт']['Братислава']['weight'] = 200
G['Будапешт']['Рим']['weight'] = 1215
G['Рим']['Париж']['weight'] = 1422
G['Рим']['Мадрид']['weight'] = 1957
G['Варшава']['Берлін']['weight'] = 574
G['Берлін']['Париж']['weight'] = 1057
G['Берлін']['Лондон']['weight'] = 1101
G['Лондон']['Париж']['weight'] = 461
G['Лондон']['Мадрид']['weight'] = 1721
G['Мадрид']['Париж']['weight'] = 1275

# Алгоритм BFS (рекурсивно)
print('Breadth-first search (BFS):')
bfs_recursive(G, deque(['Київ']))
print()
# Алгоритм DFS (рекурсивно)
print('Depth-first search (DFS):')
dfs_recursive(G, 'Київ')